#!/bin/bash

function build_mesa() {
    prefix=$PWD/3rdparty/latest

    cd mesa
    meson setup --reconfigure . .mesa_build \
        -D buildtype=debug \
        -D prefix=$prefix \
        -D valgrind=false \
        -D gallium-drivers=iris \
        -D vulkan-drivers=intel \
        -D gallium-nine=false \
        -D gallium-omx="disabled" \
        -D platforms=x11,wayland \
        -D llvm=false \
        -D tools=intel \
        -D build-tests=false \
        -D vulkan-layers=overlay

    ninja -C ./.mesa_build/ install

    cd ..
}

function build_assimp() {
    cd assimp
    cmake -B build64
    cmake --build build64 --parallel8
}

function compile {
    clear

    export VK_ICD_FILENAMES=$PWD/3rdparty/latest/share/vulkan/icd.d/intel_icd.x86_64.json

    mkdir -p .build
    
    cd .build

    cmake ..

    cmake --build . --target Vulkan
    cmake --build . --target GLFW
    cmake --build . --target Image
    cmake --build . --target Importer
    
    cd ..
    
    python3 python/precompile.py
   
    cd .build
        cmake --build . --target VKEngine --parallel8
    cd ..
} 

function clean {
    rm -rf .build/
    rm -rf precompiled/
    cd Mathon
        ./Mathon -c
    cd ..
}

function help {
    echo "-r  or --run      = run VKEngine"
    echo "-c  or --clean    = clean all build files"
    echo "-b  or --build    = build project"
       echo "-rb or --rebuild  = totaly rebuild all project"
}

if [[ "$1" == "--clean" || "$1" == "-c" ]]; then
    clean
fi


if [[ "$1" == "--build" || "$1" == "-b" ]]; then
    compile
fi


if [[ "$1" == "--rebuild" || "$1" == "-rb" ]]; then
    clean
    compile
fi

if [[ "$1" == "--help" || "$1" == "-h" ]]; then
    help    
fi

if [[ "$1" == "--build_mesa" ]]; then
    build_mesa
fi

if [[ "$1" == "--build_assimp" ]]; then
    build_assimp
fi

if [[ "$2" == "--run" || "$2" == "-r" || "$1" == "" ]]; then
    ./.build/src/VKEngine
fi


